                      //////////////////////////////////
                     //  Requires SigmaBinary 1.3.4  //
                    //////////////////////////////////

  //////////////////////////////////////////////////////////////////////
 // Forum Thread: http://forum.kerbalspaceprogram.com/threads/127820 //
//////////////////////////////////////////////////////////////////////


@Kopernicus:NEEDS[SigmaBinary,!GalacticNeighborhood]:AFTER[SigmaBinary]
{
	
	// INSTRUCTIONS:
	// Copy this cfg anywhere into the GameData folder
	// Set the name of the two bodies you want to turn into a binary system plus the reference body
	
	@Body[PRIMARY_NAME_HERE]           // Put here the name of the heaviest body (eg: Pluto)
	{
		SigmaBinary = Primary      // Don't change this line
	}
	@Body[SECONDARY_NAME_HERE]         // Put here the name of the lightest body (eg: Charon)
	{
		SigmaBinary = Secondary    // Don't change this line
	}
	@Body[PARENT_NAME_HERE]            // Put here the name of the body around which your binary system orbits (eg: Sun)
	{
		SigmaBinary = Reference    // Don't change this line
	}
	
	
	// Now sit back and enjoy your binary system
	
	// Sigma
	
	
	
  ////////////////////////////////////////////
 // You don't need to read past this point //
////////////////////////////////////////////
	
	
	
	// This part creates the barycenter
	
	+Body[SigmaBarycenter]
	{
		SigmaBinary = Barycenter
		@name = #$/Body:HAS[#SigmaBinary[Primary]]/name$$/Body:HAS[#SigmaBinary[Secondary]]/name$
		#/Body:HAS[#SigmaBinary[Primary]]/Orbit {}
		checkSun = #$/Body:HAS[#SigmaBinary[Primary]]/name$
	}
	
	// This part sets the Primary body
	
	@Body:HAS[#SigmaBinary[Primary]]
	{
		%finalizeOrbit = #$/Body:HAS[#SigmaBinary[Secondary]]/finalizeOrbit$
		@Properties
		{
			%SigmaFinalize = #$/Body:HAS[#SigmaBinary[Secondary]]/finalizeOrbit$
		}
		
		// Calculate the temporary SoI (only if it's not already explicitly set)
		
		@Properties:HAS[~sphereOfInfluence[*]]
		{
			sphereOfInfluence = #$mass$
			@sphereOfInfluence /= #$/Body:HAS[#SigmaBinary[Reference]]/Properties/mass$
			@sphereOfInfluence != 0.4
			@sphereOfInfluence *= #$../Orbit/semiMajorAxis$
			minSoI = 1
		}
		
		// Fixes the SoI if it's too small
		
		@Properties:HAS[#minSoI[1]]
		{
			@minSoI = #$radius$
			@minSoI *= 2
			@minSoI -= #$radius$
			@minSoI -= 40000			
		}
		@Properties:[#minSoI[>0]|#minSoI[0]]
		{
			@minSoI += #$radius$
			@minSoI += 40000	
		}
		@Properties:HAS[#minSoI[<0]]
		{
			%minSoI = #$radius$
			@minSoI *= 2
		}
		@Properties
		{
			@minSoI -= #$sphereOfInfluence$
		}
		@Properties:HAS[#minSoI[>0]]
		{
			@sphereOfInfluence += #$minSoI$
		}
		
		// Set orbital parameters
		
		!Orbit {}
		#/Body:HAS[#SigmaBinary[Secondary]]/Orbit {}
		@Orbit
		{
			@color = #$/Body:HAS[#SigmaBinary[Barycenter]]/Orbit/color$
			@referenceBody = #$/Body:HAS[#SigmaBinary[Barycenter]]/name$
			@argumentOfPeriapsis += 180
			
			// Set new semiMajorAxis
			
			%semiMajorAxis = #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$
			@semiMajorAxis += #$../Properties/mass$
			@semiMajorAxis != -1
			@semiMajorAxis *= #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$
			@semiMajorAxis *= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$
		}
	}
	
	// This part changes the SoI of the Secondary body when it's too small or too big
	// If the original body have the SoI already explicitly set, this part won't change anything
	
	@Body:HAS[#SigmaBinary[Secondary]]
	{
		@Properties:HAS[~sphereOfInfluence[*]]
		{
			%sphereOfInfluence = #$mass$
			@sphereOfInfluence /= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$
			@sphereOfInfluence != 0.4
			@sphereOfInfluence *= #$../Orbit/semiMajorAxis$
			%maxSoI = 1
			%minSoI = 1
		}
		@Properties:HAS[#minSoI[1]]
		{
			@minSoI = #$radius$
			@minSoI *= 2
			@minSoI -= #$radius$
			@minSoI -= 40000			
		}
		@Properties:[#minSoI[>0]|#minSoI[0]]
		{
			@minSoI += #$radius$
			@minSoI += 40000	
		}
		@Properties:HAS[#minSoI[<0]]
		{
			%minSoI = #$radius$
			@minSoI *= 2
		}
		@Properties
		{
			@minSoI -= #$sphereOfInfluence$
		}
		@Properties:HAS[#minSoI[>0]]
		{
			@sphereOfInfluence += #$minSoI$
		}
		@Properties:HAS[#maxSoI[1]]
		{
			@maxSoI -= #$../Orbit/eccentricity$
			@maxSoI *= #$../Orbit/semiMajorAxis$
			@maxSoI -= #$radius$
			@maxSoI -= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/radius$
			@maxSoI /= 2
			@maxSoI += #$radius$
			@maxSoI -= #$sphereOfInfluence$
		}
		@Properties:HAS[#maxSoI[<0]]
		{
			@sphereOfInfluence += #$maxSoI$
		}
	}
	
	// This part sets Barycenter's mass, description and SoI
	
	@Body:HAS[#SigmaBinary[Barycenter]]
	{
		@Properties:HAS[#SigmaFinalize[True]]
		{
			@mass += #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$
		}
		@Properties
		{
			
			// Set description
			
			description = #This is the Barycenter of the $/Body:HAS[#SigmaBinary[Primary]]/name$-$/Body:HAS[#SigmaBinary[Secondary]]/name$ System.
			
			// Set mass
			
			@mass += #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$
			@mass *= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$
			@mass *= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$
			@mass *= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$
			@mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$
			@mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$
			@mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$
			
			// Set Sphere of Influence
			
			%sphereOfInfluence = #$/Body:HAS[#SigmaBinary[Primary]]/Properties/sphereOfInfluence$
		}
		@Properties:HAS[#SigmaFinalize[True]]
		{
			@mass -= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$
		}
	}
	
	// This part:
	// Sets the final SoI value for the Primary Body
	// Calculates the correct rotation period if the body is tidallyLocked
	
	@Body:HAS[#SigmaBinary[Primary]]
	{
		
		// Set final SoI value
		
		@Properties
		{
			%sphereOfInfluence = #$../Orbit/eccentricity$
			@sphereOfInfluence += 1
			@sphereOfInfluence *= #$../Orbit/semiMajorAxis$
			@sphereOfInfluence += #$/Body:HAS[#SigmaBinary[Barycenter]]/Properties/sphereOfInfluence$
		}
		
		// If tidallyLocked fix the rotationPeriod
		
		@Properties:HAS[#tidallyLocked[True]]
		{
			!tidallyLocked = DEL
			%rotates = True
			%rotationPeriod = #$/Body:HAS[#SigmaBinary[Reference]]/Properties/mass$
			@rotationPeriod /= #$/Body:HAS[#SigmaBinary[Barycenter]]/Orbit/semiMajorAxis$
			@rotationPeriod /= #$/Body:HAS[#SigmaBinary[Barycenter]]/Orbit/semiMajorAxis$
			@rotationPeriod /= #$/Body:HAS[#SigmaBinary[Barycenter]]/Orbit/semiMajorAxis$
			@rotationPeriod /= 5.91525585920849e11 // divide by (4*pi^2)/G
			@rotationPeriod != -0.5
		}
	}
	
	// checks if you are moving the sun
	
	@Body:HAS[~checkSun[]]
	{
		checkSun = #$/Body:HAS[#SigmaBinary[Barycenter]]/checkSun$
	}
	@Body:HAS[#SigmaBinary[Barycenter],#checkSun[Sun]]
	{
		%cbNameLater = #$name$
		%name = Sun
		!checkSun = DEL
		@Template
		{
			@name = Sun
		}
		!Orbit {}
		!Atmosphere {}
		!ScaledVersion {}
		ScaledVersion
		{
			SolarLightColor
			{
				%givesOffLight = false
			}
		}
	}
	@Body:HAS[#SigmaBinary[Primary],#name[Sun]]
	{
		%name = StockSun
		%cbNameLater = Sun
		!checkSun = DEL
		@Orbit
		{
			@referenceBody = Sun
			@color = 0.7,0.7,0.4,1
		}
	}
	@Body:HAS[#checkSun[Sun]]
	{
		@Orbit:HAS[#referenceBody[Sun]]
		{
			@referenceBody = StockSun
		}
	}
}

// This part adds an exception for ISRU contracts on the barycenter

@Contracts:NEEDS[SigmaBinary,!GalacticNeighborhood]:AFTER[SigmaBinary]
{
	@ISRU
	{
		@RESOURCE_REQUEST[Ore]
		{
			Forbidden = #$@Kopernicus/Body:HAS[#SigmaBinary[Barycenter]]/name$
		}
	}
}


@Kopernicus:NEEDS[SigmaBinary,!GalacticNeighborhood]:AFTER[SigmaBinary]
{
	@Body,*
	{
		!SigmaBinary = DEL
		!checkSun = DEL
		@Properties
		{
			!minSoI = DEL
			!maxSoI = DEL
		}
	}
}
